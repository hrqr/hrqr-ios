/**
* Created by Valentin Heun on 9/14/15.
*
* Copyright (c) 2015 Valentin Heun
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

#pragma once

#include "ofMain.h"
#include "ofxiOS.h"
#include "ofxiOSExtras.h"
#include "ofxCv.h"
#include "cv.h"

#include <stdio.h>
#include <stdlib.h>
#include <ofxCvColorImage.h>
#import <AVFoundation/AVFoundation.h>
#include "ofxUIWebViewInterfaceJavaScript.h"


class ofApp : public ofxiOSApp, ofxUIWebViewDelegateCpp {
	
    public:
    
    
    typedef std::vector<float> mypair;
    static bool comparator ( const mypair& l, const mypair& r)
    { return l[0] < r[0]; }
    
    static bool comparator2 ( const mypair& l, const mypair& r)
    { return l[1] < r[1]; }
    
    
        void setup();
        void update();
        void draw();
        void exit();
	
        void touchDown(ofTouchEventArgs & touch);
        void touchMoved(ofTouchEventArgs & touch);
        void touchUp(ofTouchEventArgs & touch);
        void touchDoubleTap(ofTouchEventArgs & touch);
        void touchCancelled(ofTouchEventArgs & touch);

        void lostFocus();
        void gotFocus();
        void gotMemoryWarning();
        void deviceOrientationChanged(int newOrientation);
    
    
    void urlResponse(ofHttpResponse &response);
    
    ofxUIWebViewInterfaceJavaScript interface;
    
    void handleCustomRequest(NSString *request);
    
    ofHttpResponse ofSaveURLTo(string url, string path);
    
    
    ofImage abcImg, setImg, backImg;
    ofRectangle abcRect, setRect, backRect;

    
    // float find_angle(ofVec2f p0,ofVec2f p1,ofVec2f c);
    int finalcount = 0;
    
    // uint32_t crc32(string *buf, size_t size);
    string messageOld;
    int32_t crc32(const void* data, size_t length);
    long bitNumber (bool bits[21]);
    string itob32( long i );
    string itob62( long i );
    unsigned long crc16(const void *dataIn, size_t length);
    // void cons();
    
    //void keyPressed(int key);
    
    ofVideoGrabber cam;
    ofImage camST;
    
    ofImage workImage;
    ofImage workImageTrans;
    //ofImage colorCv;
    
    ofTrueTypeFont verdana30;
    
    int                 imgW, imgH;
    ofImage img;
    
    string theMSG;
    
    ofTexture tex;
    
    string webText ="";
    
    
    ofxCv::ContourFinder contourFinder;
    //contourFinder2;
    //float threshold;
    // ofxCv::TrackingColorMode trackingColorMode;
    //  ofColor targetColor;
    ofImage thresh;
    //  cv::Mat imageMat;
    
    
    float sizeS ;
    //vector<ofVec2f> angleCollector;
    
    int W = 640;
    int H = 480;
    int HS = 480;
    
    bool onlyOnce = true;
    pair <float,int>  tester;
    ofFbo fbo,fbo2, fbo3;
    
    vector<ofPoint> pointsA ;
    vector<ofPoint> pointsB ;
    vector<int> distIndex ;
    vector< vector<float> > distlength;
    vector<float> distlengthFinal;
    vector< vector<float> > disFin;
    vector <float> test;
    
    vector <float> disAll;
    
    bool drawOrnot = true;
    
    //vector<int> pointIndex (3,0);
    int pointIndex[3];// = {16,2,77,29};
    
   // cv::Mat  columnMean;
   // cv::Mat  rowMean;
    
    cv::Mat mat;
    
    cv::Mat homography;
    bool homographyReady = false;
    ofPixels pixels;
    unsigned char * src;
    
    ofPolyline finalSquare, finalVisual;
    string theMessage = "";
    
    ofPath theRect;
    
    bool setWebLocal = true;
    
    int interfaceActivity=0;
    
    cv::Mat srcMat, dstMat;
    
    ofPoint touchPoint;
    /// video
    
    ofPixels pix;
    int pixelscount = 0;
    
    long intA[139] = {
        1034495,
        1042687,
        909567,
        1041531,
        387327,
        869119,
        975103,
        1033343,
        359125,
        1040635,
        903807,
        516223,
        1032575,
        1032447,
        1008381,
        1036543,
        1044671,
        775423,
        911583,
        999679,
        1040511,
        1044543,
        1036415,
        904823,
        1042527,
        518901,
        1002237,
        746237,
        355069,
        346877,
        877309,
        1001725,
        359125,
        1008373,
        485629,
        483581,
        1000701,
        1000189,
        1008381,
        1004285,
        1012413,
        477949,
        879325,
        869117,
        1007869,
        1011901,
        1003773,
        742653,
        1009885,
        486133,
        516831,
        518879,
        452831,
        518494,
        355039,
        877279,
        485599,
        516703,
        356053,
        518365,
        451935,
        387167,
        516447,
        516319,
        518367,
        779487,
        257231,
        903935,
        486103,
        483551,
        518239,
        257103,
        517215,
        452443,
        518743,
        387805,
        1032445,
        518391,
        1041643,
        1034335, 
        1008375, 
        1008383, 
        1032439, 
        1041663, 
        1042655, 
        1040639, 
        713963, 
        712939, 
        713979, 
        1002045, 
        1002109, 
        485981, 
        1008253, 
        485469, 
        1007741, 
        297938, 
        344191, 
        344159, 
        901853, 
        1032319, 
        999549, 
        868437, 
        901239, 
        162716, 
        474057, 
        1007839, 
        160190, 
        1028553, 
        964014, 
        1043191, 
        771195, 
        1010399, 
        376919, 
        346709, 
        344661, 
        69572, 
        167882, 
        509279, 
        1032789, 
        344703, 
        377559, 
        360662, 
        352341, 
        376917, 
        352511, 
        1040597, 
        344279, 
        377045, 
        516863, 
        1037055, 
        355071, 
        352989, 
        355037, 
        379509, 
        720683, 
        516693, 
        355029, 
        354517, 
        486109
    };
    
    string charA[139] = {
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "i",
        "j",
        "k",
        "l",
        "m",
        "n",
        "o",
        "p",
        "q",
        "r",
        "s",
        "t",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z",
        "a",
        // "b",
        "c",
        // "d",
        "e",
        "f",
        "g",
        "h",
        "i",
        "j",
        "k",
        "l",
        "m",
        "n",
        "o",
        "p",
        "q",
        "r",
        "s",
        "t",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "0",
        "http://",//http
        "https://",//https
         "coin://",//coin
        "Ä",
        "ä",
        "Ö",
        "ö",
        "Ü",
        "ü",
        "±",
        "|",
        "!",
        "?",
        ".",
        ";",
        ",",
        ":",
        "{",
        "}",
        "/",
        "(",
        ")",
        "$",
        "&",
        "%",
        "§",
        "\"",
        "=",
        "-",
        "+",
        "*",
        "#",
        "<",
        ">",
        "°",
        "^",
        "_",
        "[",
        "]",
        "'",
        "´",
        "`",
        "@",
        "ß",
        "€",
        
        "®",
        "©",
        "≠",
        "¥",
        "≤",
        "≈",
        "~",
        "•"
    };
    
    
    bool bitA[139][21] = {
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1}, //a
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1}, //b
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1}, //c
        {1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1}, //d
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1}, //e
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1}, //f
        {1, 1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 1, 0, 1, 1, 1, 1}, //g
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, //h
        {1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1}, //i
        {1, 1, 0, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 1, 1, 1, 1, 1, 1}, //j
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1}, //k
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //l
        {1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, //m
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, //n
        {1, 0, 1, 1, 1, 1, 1,
            1, 0, 1, 0, 0, 0, 1,
            1, 0, 1, 1, 1, 1, 1}, //o
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0}, //p
        {1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0}, //q
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1}, //r
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1}, //s
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1}, //t
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1}, //u
        {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0}, //v
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1}, //w
        {1, 1, 1, 0, 1, 1, 1,
            0, 0, 1, 1, 1, 0, 0,
            1, 1, 1, 0, 1, 1, 1}, //x
        {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1}, //y
        {1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //z
        
        //small letters
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0,1, 0, 1, 1, 1, 1, 1}, //a<
        //b<
        {1, 0, 1, 1, 1, 1, 1,1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1}, //c<
        //d<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1}, //e<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0}, //f<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1}, //g<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1}, //h<
        {1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1}, //i<
        {1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1}, //j<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1}, //k<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1}, //l<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1}, //m<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1}, //n<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1}, //o<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0}, //p<
        {1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0}, //q<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1}, //r<
        {1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1}, //s<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1}, //t<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1}, //u<
        {1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0}, //v<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1}, //w<
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1}, //x<
        {1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1}, //y<
        {1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1}, //z<
        
        // caps
        
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //A
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //B
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1}, //C
        {0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //D
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1}, //E
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1}, //F
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1}, //G
        {1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //H
        {1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1}, //I
        {1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //J
        {1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1}, //K
        {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1}, //L
        {1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //M
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //N
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //O
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1}, //P
        {1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1}, //Q
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1}, //R
        {1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1}, //S
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1}, //T
        {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //U
        {1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1}, //V
        {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //W
        {1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1}, //X
        {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //Y
        {1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1}, //Z
        
        //signs
        
        
        {1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, //1
        {1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //2
        {1, 1, 0, 1, 0, 1, 1,
            1, 0, 0, 1, 0, 0, 1,
            1, 1, 1, 1, 1, 1, 1}, //3
        {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1}, //4
        {1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1}, //5
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1}, //6
        {1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, //7
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1}, //8
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1}, //9
        {1, 1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 1, 1, 1, 1, 1, 1}, //0
        
        
        {1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1}, //http://
        {1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1}, //https://
        {1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1}, //coin://
        
        
        {1, 0, 1, 1, 1, 1, 0,
            0, 0, 1, 0, 1, 0, 0,
            1, 0, 1, 1, 1, 1, 0},//Ä
        {1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1},//ä
        {1, 0, 1, 1, 1, 0, 1,
            0, 0, 1, 0, 1, 0, 1,
            1, 0, 1, 1, 1, 0, 1},//Ö
        {1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1},//ö
        {1, 0, 1, 1, 1, 0, 1,
            0, 0, 0, 0, 1, 0, 1,
            1, 0, 1, 1, 1, 0, 1},//Ü
        {1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1},//ü
        {0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1},//±
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1},//|
        
        {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1}, //!
        {1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1}, //?
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, //.
        {1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1}, //;
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1}, //,
        {1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1}, //:
        {0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1}, //{
        {1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0}, //}
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1}, ///
        {0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1}, //(
        {1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0}, //)
        {0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0}, //$
        {1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1}, //&
        {1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1}, //%
        {1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1}, //$
        {1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1}, //"
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1}, //=
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1}, //-
        {0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1}, //+
        {0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1}, //*
        {1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1}, //#
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, //<
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1}, //>
        {1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1}, //°
        {0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1}, //^
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1}, //_
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1}, //'
        
        
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1}, //[
        {1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1},//]
        
        
        {1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1}, //´
        {1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1}, //`
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //@
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0}, //ß
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1}, //€
        
        
        
        {1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1},//®
        {1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1},//©
        {1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1},//≠
        
        {1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0}, //¥
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1}, //≤
        {1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1},//≈
        {1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1},//~
        
        {1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1} //•
     
        
        
    };
    
    int messageCounter = 0;
    

    
};


